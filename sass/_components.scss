////////////////////////////////////////////////
// LOGO
// Flexbox item
.logo {
    height: 3.25rem;
    margin-left: 2rem;
}

////////////////////////////////////////////////
// SEARCH
// Flexbox item
// Flexbox container
.search {
    // background-color: orangered; // for testing porpouses
    flex: 0 0 40%;

    display: flex;
    align-items: center; // vertically align
    justify-content: center; // horizontally align

    &__input {
        // input elements by default don't inherit font properties
        // inherit the font size of header
        font-family: inherit;
        font-size: inherit;
        color: inherit;
        background-color: var(--color-grey-light-2);
        border: none;
        padding: .7rem 2rem;
        // doesn't matter the value just put a high number even in px
        border-radius: 100px;
        width: 90%;
        transition: all .2s;
        // to move button on top of the input
        margin-right: -3.25rem;

        // when focused, don't show the outline and expand to occupy 100% of the parent's width
        &:focus {
            outline: none;
            width: 100%;
            background-color: var(--color-grey-light-3);
        }

        &::-webkit-input-placeholder {
            font-weight: 100;
            color: var(--color-grey-light-4);
        }
    }

    // when the input is focused, change the adjacent button's background to the same color
    &__input:focus+&__button {
        background-color: var(--color-grey-light-3);
    }

    &__button {
        border: none;
        background-color: var(--color-grey-light-2);

        &:focus {
            outline: none;
        }

        &:active {
            transform: translateY(2px);
        }
    }

    &__icon {
        // it's easier to style a SVG compared to an icon font
        height: 2rem;
        width: 2rem;
        // to change SVG's color
        fill: var(--color-grey-dark-3);
    }
}

////////////////////////////////////////////////
// USER NAVIGATION
// Flexbox item
// Flexbox container
.user-nav {
    // background-color: greenyellow; // for testing porpouses
    // overrides the align-items: center in header
    // because we want the user-nav to occupy all the available height
    align-self: stretch;

    display: flex;
    align-items: center; // center child elements vertically

    // select all the direct children of .user-nav
    // Flexbox container
    &>* {
        padding: 0 2rem;
        cursor: pointer;
        height: 100%;

        display: flex;
        align-items: center;
    }

    &>*:hover {
        background-color: var(--color-grey-light-2);
    }

    &__icon-box {
        position: relative;
    }

    &__icon {
        height: 2.25rem;
        width: 2.25rem;
        fill: var(--color-grey-dark-2);
    }

    // Flexbox container
    &__notification {
        font-size: .8rem;
        height: 1.75rem;
        width: 1.75rem;
        border-radius: 50%;
        background-color: var(--color-primary);
        color: #fff;

        position: absolute;
        top: 1.5rem;
        right: 1.1rem;

        // Flexbox works not only with child elements but with text as well
        // to center the notification's text
        display: flex;
        justify-content: center;
        align-items: center;
    }

    &__user-photo {
        height: 3.75rem;
        // to make it round
        border-radius: 50%;
        // to put some space between user's photo and name
        margin-right: 1rem;
    }

}

////////////////////////////////////////////////
// SIDE NAVIGATION
.side-nav {
    font-size: 1.4rem;
    list-style: none;
    margin-top: 3.5rem;

    &__item {
        position: relative;

        // put a bottom margin except for the last child inside the parent container
        &:not(:last-child) {
            margin-bottom: .5rem;
        }
    }

    // How to create the effect when hovering an item on the sidebar:
    // create a pseudo element :before that will do the growing animation when the item is hovered
    &__item::before {
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        height: 100%;
        width: 3px;
        background-color: var(--color-primary);
        transform: scaleY(0); // kinda hide the pseudo element in normal state
        // from where in the element the trasform property starts, by default is center
        // can use to make very cool effects
        // transform-origin: bottom;
        // make the animations of the pseudo element
        // we can set different settings for different properties
        // so it's possible to create "staged" animations: one happens after another
        // and have different durations and timing functions
        transition: transform .2s,
            width .4s cubic-bezier(1, 0, 0, 1) .2s,
            background-color .1s; // expand the width in 0.4s with custom timing function after the vertical scaling (thanks to  the delay of 0.2s)
    }

    // style for when the item is hovered or with active variant specified in HTML
    &__item:hover::before,
    &__item--active::before {
        transform: scaleY(1); // make the pseudo element grow vertically when hovered
        // from 3px to 100%
        width: 100%;
    }

    // change the background color (of the pseudo-element) when the item is clicked
    &__item:active::before {
        background-color: var(--color-primary-light);
    }

    // Flexbox container
    // parent of <svg> icon and <span> text
    &__link:link,
    &__link:visited {
        color: var(--color-grey-light-1);
        text-decoration: none;
        text-transform: uppercase;
        display: block;
        padding: 1.5rem 3rem;

        position: relative; // we need to set have a specified position in order to use z-index
        z-index: 10; // put the link (icon and text) on top of the :before pseudo-element

        display: flex;
        align-items: center;
    }

    // thanks to currentColor, both the icon and the text change to the same color
    // instead of having to write a :hover also for the icon
    // &__link:hover {
    //     color: orangered;
    // }

    &__icon {
        // usually we style SVGs as squares
        width: 1.75rem;
        height: 1.75rem;
        margin-right: 2rem;
        // currentColor = current color of the element or of the parent
        // instead of writing again var(..)
        fill: currentColor; // it's like inherit
    }


}

////////////////////////////////////////////////
// LEGAL TEXT
.legal {
    font-size: 1.2rem;
    color: var(--color-grey-light-4);
    text-align: center;
    padding: 2.5rem;
}

////////////////////////////////////////////////
// GALLERY
// Flexbox container
.gallery {

    // to put imgs side by side
    // without having to use width 33.333%, float and clear-fix hack!
    display: flex;

    &__photo {
        // flexible images for responsive design --> need to use % for fluid images
        width: 100%;
        // to avoid blank space under imgs when we leave the as inline elements --> better to put them as block or inline-block
        display: block;
    }
}

////////////////////////////////////////////////
// HOTEL OVERVIEW
// Flexbox container
.overview {

    display: flex;
    align-items: center;
    border-bottom: 1px solid var(--color-grey-light-2);

    &__heading {
        font-size: 2.25rem;
        font-weight: 300;
        text-transform: uppercase;
        letter-spacing: 1px;
        padding: 1.5rem 3rem;
    }

    // Flexbox container
    &__stars {
        // creates space but element occupy entire space
        // flex: 1;

        // background-color: orangered; // for testing porpouses

        // very useful TRICK to use margin auto with Flexbox
        // to create a space between two element without having it to occupy the entire space
        // 2 elements --------space--------- 2 elements
        margin-right: auto;

        // to fix stars not perfectly vertically alignen and nicely side by side
        display: flex;
    }

    &__icon-star,
    &__icon-location {
        width: 1.75rem;
        height: 1.75rem;
        fill: var(--color-primary);
    }

    &__icon-location {
        margin-right: .5rem;
    }

    // Flexbox container
    &__location {
        font-size: 1.2rem;
        display: flex;
        align-items: center;
    }

    // Flexbox container
    &__rating {
        background-color: var(--color-primary);
        color: #fff;
        margin-left: 3rem;
        padding: 0 2.25rem;
        align-self: stretch;

        display: flex;
        flex-direction: column;
        align-content: center;
        justify-content: center;
    }

    &__rating-average {
        font-size: 2.25rem;
        font-weight: 300;
        margin-bottom: -3px;
    }

    &__rating-count {
        font-size: .8rem;
        text-transform: uppercase;
    }


}

////////////////////////////////////////////////
// BUTTON INLINE
.btn-inline {
    border: none;
    color: var(--color-primary);
    font-size: inherit; // for reusability porpouses -> we set the font-size on the parent element
    border-bottom: 1px solid currentColor;
    padding-bottom: 2px;
    display: inline-block;
    background: transparent; // for reusability porpouses
    cursor: pointer;
    transition: all .2s;

    &:hover {
        color: var(--color-grey-dark-1);
        // border-bottom color will automatically update as well since we used currentColor
    }

    &:focus {
        outline: none;
        // infinite pulsate animation when element is focused
        animation: pulsate 1s infinite;
    }
}

@keyframes pulsate {
    0% {
        transform: scale(1);
        box-shadow: none;
    }

    50% {
        transform: scale(1.05);
        box-shadow: 0 1rem 4rem rgba(0, 0, 0, .25);
    }

    100% {
        transform: scale(1);
        box-shadow: none;
    }
}