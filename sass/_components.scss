////////////////////////////////////////////////
// LOGO
// Flexbox item
.logo {
    height: 3.25rem;
    margin-left: 2rem;
}

////////////////////////////////////////////////
// SEARCH
// Flexbox item
// Flexbox container
.search {
    // background-color: orangered; // for testing porpouses
    flex: 0 0 40%;

    display: flex;
    align-items: center; // vertically align
    justify-content: center; // horizontally align

    @media only screen and (max-width: $bp-smallest) {
        // move the searchbar to be the last element of the container
        order: 1;
        // let the searchbar occupy an entire row
        flex: 0 0 100%;
        // fake the searchbar to be from side to side so it's less noticeable that it's not perfectly centered
        // TO-FIX the focus mode
        background-color: var(--color-grey-light-2);
    }

    &__input {
        // input elements by default don't inherit font properties
        // inherit the font size of header
        font-family: inherit;
        font-size: inherit;
        color: inherit;
        background-color: var(--color-grey-light-2);
        border: none;
        padding: .7rem 2rem;
        // doesn't matter the value just put a high number even in px
        border-radius: 100px;
        width: 90%;
        transition: all .2s;
        // to move button on top of the input
        margin-right: -3.25rem;

        // when focused, don't show the outline and expand to occupy 100% of the parent's width
        &:focus {
            outline: none;
            width: 100%;
            background-color: var(--color-grey-light-3);
        }

        &::-webkit-input-placeholder {
            font-weight: 100;
            color: var(--color-grey-light-4);
        }
    }

    // when the input is focused, change the adjacent button's background to the same color
    &__input:focus+&__button {
        background-color: var(--color-grey-light-3);
    }

    &__button {
        border: none;
        background-color: var(--color-grey-light-2);

        &:focus {
            outline: none;
        }

        &:active {
            transform: translateY(2px);
        }
    }

    &__icon {
        // it's easier to style a SVG compared to an icon font
        height: 2rem;
        width: 2rem;
        // to change SVG's color
        fill: var(--color-grey-dark-3);
    }
}

////////////////////////////////////////////////
// USER NAVIGATION
// Flexbox item
// Flexbox container
.user-nav {
    // background-color: greenyellow; // for testing porpouses
    // overrides the align-items: center in header
    // because we want the user-nav to occupy all the available height
    align-self: stretch;

    display: flex;
    align-items: center; // center child elements vertically

    // select all the direct children of .user-nav
    // Flexbox container
    &>* {
        padding: 0 2rem;
        cursor: pointer;
        height: 100%;

        display: flex;
        align-items: center;
    }

    &>*:hover {
        background-color: var(--color-grey-light-2);
    }

    &__icon-box {
        position: relative;
    }

    &__icon {
        height: 2.25rem;
        width: 2.25rem;
        fill: var(--color-grey-dark-2);
    }

    // Flexbox container
    &__notification {
        font-size: .8rem;
        height: 1.75rem;
        width: 1.75rem;
        border-radius: 50%;
        background-color: var(--color-primary);
        color: #fff;

        position: absolute;
        top: 1.5rem;
        right: 1.1rem;

        // Flexbox works not only with child elements but with text as well
        // to center the notification's text
        display: flex;
        justify-content: center;
        align-items: center;
    }

    &__user-photo {
        height: 3.75rem;
        // to make it round
        border-radius: 50%;
        // to put some space between user's photo and name
        margin-right: 1rem;
    }

}

////////////////////////////////////////////////
// SIDE NAVIGATION
.side-nav {
    font-size: 1.4rem;
    list-style: none;
    margin-top: 3.5rem;

    // Flexbox container
    @media only screen and (max-width: $bp-medium) {
        // put the items side by side
        display: flex;
        margin: 0;
    }

    &__item {
        position: relative;

        // put a bottom margin except for the last child inside the parent container
        &:not(:last-child) {
            margin-bottom: .5rem;

            @media only screen and (max-width: $bp-medium) {
                // remove bottom margin
                margin: 0;
            }
        }

        @media only screen and (max-width: $bp-medium) {
            // let the items grow as much as they can so in case each will occupy 25% of the available space (4 items)
            flex: 1;
        }

    }

    // How to create the effect when hovering an item on the sidebar:
    // create a pseudo element :before that will do the growing animation when the item is hovered
    &__item::before {
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        height: 100%;
        width: 3px;
        background-color: var(--color-primary);
        transform: scaleY(0); // kinda hide the pseudo element in normal state
        // from where in the element the trasform property starts, by default is center
        // can use to make very cool effects
        // transform-origin: bottom;
        // make the animations of the pseudo element
        // we can set different settings for different properties
        // so it's possible to create "staged" animations: one happens after another
        // and have different durations and timing functions
        transition: transform .2s,
            width .4s cubic-bezier(1, 0, 0, 1) .2s,
            background-color .1s; // expand the width in 0.4s with custom timing function after the vertical scaling (thanks to  the delay of 0.2s)
    }

    // style for when the item is hovered or with active variant specified in HTML
    &__item:hover::before,
    &__item--active::before {
        transform: scaleY(1); // make the pseudo element grow vertically when hovered
        // from 3px to 100%
        width: 100%;
    }

    // change the background color (of the pseudo-element) when the item is clicked
    &__item:active::before {
        background-color: var(--color-primary-light);
    }

    // Flexbox container
    // parent of <svg> icon and <span> text
    &__link:link,
    &__link:visited {
        color: var(--color-grey-light-1);
        text-decoration: none;
        text-transform: uppercase;
        display: block;
        padding: 1.5rem 3rem;

        position: relative; // we need to set have a specified position in order to use z-index
        z-index: 10; // put the link (icon and text) on top of the :before pseudo-element

        display: flex;
        align-items: center;


        @media only screen and (max-width: $bp-medium) {
            // horizontallu align
            justify-content: center;
            // increase padding
            padding: 2rem;
        }

        @media only screen and (max-width: $bp-small) {
            // put the icon on top of the text
            flex-direction: column;
            // decrease (sides') padding
            padding: 1.5rem .5rem;
        }

    }

    // thanks to currentColor, both the icon and the text change to the same color
    // instead of having to write a :hover also for the icon
    // &__link:hover {
    //     color: orangered;
    // }

    &__icon {
        // usually we style SVGs as squares
        width: 1.75rem;
        height: 1.75rem;
        margin-right: 2rem;
        // currentColor = current color of the element or of the parent
        // instead of writing again var(..)
        fill: currentColor; // it's like inherit

        @media only screen and (max-width: $bp-small) {
            // remove the right margin in order to have the icon horizontally centered
            margin-right: 0;
            // put some margin to the bottom
            margin-bottom: .7rem;
            // decrease the size
            width: 1.5rem;
            height: 1.5rem;
        }
    }


}

////////////////////////////////////////////////
// LEGAL TEXT
.legal {
    font-size: 1.2rem;
    color: var(--color-grey-light-4);
    text-align: center;
    padding: 2.5rem;

    @media only screen and (max-width: $bp-medium) {
        // remove the legal text
        display: none;
    }
}

////////////////////////////////////////////////
// GALLERY
// Flexbox container
.gallery {

    // to put imgs side by side
    // without having to use width 33.333%, float and clear-fix hack!
    display: flex;

    &__photo {
        // flexible images for responsive design --> need to use % for fluid images
        width: 100%;
        // to avoid blank space under imgs when we leave the as inline elements --> better to put them as block or inline-block
        display: block;
    }
}

////////////////////////////////////////////////
// HOTEL OVERVIEW
// Flexbox container
.overview {

    display: flex;
    align-items: center;
    border-bottom: var(--line);

    &__heading {
        font-size: 2.25rem;
        font-weight: 300;
        text-transform: uppercase;
        letter-spacing: 1px;
        padding: 1.5rem 3rem;

        @media only screen and (max-width: $bp-small) {
            // decrease the font-size
            font-size: 1.8rem;
            // decrease the padding
            padding: 1.25rem 2rem;
        }
    }

    // Flexbox container
    &__stars {
        // creates space but element occupy entire space
        // flex: 1;

        // background-color: orangered; // for testing porpouses

        // very useful TRICK to use margin auto with Flexbox
        // to create a space between two element without having it to occupy the entire space
        // 2 elements --------space--------- 2 elements
        margin-right: auto;

        // to fix stars not perfectly vertically alignen and nicely side by side
        display: flex;
    }

    &__icon-star,
    &__icon-location {
        width: 1.75rem;
        height: 1.75rem;
        fill: var(--color-primary);
    }

    &__icon-location {
        margin-right: .5rem;
    }

    // Flexbox container
    &__location {
        font-size: 1.2rem;
        display: flex;
        align-items: center;
    }

    // Flexbox container
    &__rating {
        background-color: var(--color-primary);
        color: #fff;
        margin-left: 3rem;
        padding: 0 2.25rem;
        align-self: stretch;

        display: flex;
        flex-direction: column;
        align-items: center; // PAY ATTENTION NOT TO WRITE align-content !!!
        justify-content: center;

        @media only screen and (max-width: $bp-small) {
            // decrease the padding
            padding: 0 1.5rem;
        }
    }

    &__rating-average {
        font-size: 2.25rem;
        font-weight: 300;
        margin-bottom: -3px;

        @media only screen and (max-width: $bp-small) {
            // decrease the font-size
            font-size: 1.8rem;
        }
    }

    &__rating-count {
        font-size: .8rem;
        text-transform: uppercase;

        @media only screen and (max-width: $bp-small) {
            // decrease the font-size
            font-size: .5rem;
        }
    }


}

////////////////////////////////////////////////
// BUTTON INLINE
.btn-inline {
    border: none;
    color: var(--color-primary);
    font-size: inherit; // for reusability porpouses -> we set the font-size on the parent element
    border-bottom: 1px solid currentColor;
    padding-bottom: 2px;
    display: inline-block;
    background: transparent; // for reusability porpouses
    cursor: pointer;
    transition: all .2s;

    span {
        margin-left: 3px;
        // set the transition only to margin-left otherwise there's a delay on arrows color
        transition: margin-left .2s;
    }

    &:hover {
        color: var(--color-grey-dark-1);
        // border-bottom color will automatically update as well since we used currentColor

        // move the arrow more to the left
        span {
            margin-left: 8px;
        }
    }

    &:focus {
        outline: none;
        // infinite pulsate animation when element is focused
        animation: pulsate 1s infinite;
    }
}

@keyframes pulsate {
    0% {
        transform: scale(1);
        box-shadow: none;
    }

    50% {
        transform: scale(1.05);
        box-shadow: 0 1rem 4rem rgba(0, 0, 0, .25);
    }

    100% {
        transform: scale(1);
        box-shadow: none;
    }
}

////////////////////////////////////////////////
// PARAGRAPH
.paragraph:not(:last-of-type) {
    // last paragraph doesn't have bottom margin
    margin-bottom: 2rem;
}

////////////////////////////////////////////////
// LIST
// Flexbox container
.list {
    list-style: none;
    margin: 3rem 0;
    padding: 3rem 0;
    border-top: var(--line);
    border-bottom: var(--line);

    display: flex;
    flex-wrap: wrap;

    &__item {
        // we want two elements side by side so we every item has 50% width
        flex: 0 0 50%;
        margin-bottom: .7rem;
    }

    // we don't want to mess up the HTML by writing 8 SVGs elements
    // so we import them in CSS
    &__item::before {
        content: "";
        display: inline-block;
        height: 1rem;
        width: 1rem;
        margin-right: .7rem;

        // Approach to include SVGs for older browsers
        // cannot change the color of the SVGs
        background-image: url(../img/chevron-thin-right.svg);
        background-size: cover;

        // Approach for newer browsers - using MASKS
        // Mask: mask defines an area where we can through the element and see what's behind, everything else will be covered
        // it's like clipping
        // if the browser supports mask, use it. Otherwise go with old browsers approach
        @supports (-webkit-mask-image: url()) {
            background-color: var(--color-primary); // "color" of the icons
            // we can see the background color only where the icon is located so it turns out to have the background's color
            -webkit-mask-image: url(../img/chevron-thin-right.svg);
            -webkit-mask-size: cover;
            mask-image: url(../img/chevron-thin-right.svg);
            mask-size: cover;

            // remove background-image in order to make this method work
            background-image: none;
        }


    }
}

////////////////////////////////////////////////
// RECOMMEND
// Flexbox container
.recommend {
    font-size: 1.3rem;
    color: var(--color-grey-dark-3);

    display: flex;
    align-items: center;
    // in this case we could have also used justify-content instead of margin auto since we want the space between only two elements
    // justify-content: space-between;

    &__count {
        // TRICK to make space between elements
        // useful if we cannot reach the desired result using just Flexbox
        // e.g. for: el1 - el2 - el3 --- space --- el4
        margin-right: auto;
    }

    // Flexbox container
    &__friends {
        // put and KEEP photos side by side
        display: flex;
    }

    &__photo {
        // put box-sizing back to default value so the border we're adding to the photo doesn't make the image shrink
        box-sizing: content-box;
        height: 4rem;
        width: 4rem;
        border-radius: 50%;
        border: 3px solid #fff; // creates the white space between imgs

        &:not(:last-child) {
            // to make imgs overlap with each other
            margin-right: -2rem;
        }
    }
}

////////////////////////////////////////////////
// REVIEW
.review {
    background-color: #fff;
    box-shadow: var(--shadow-light);
    padding: 3rem;
    margin-bottom: 3.5rem;
    position: relative;
    overflow: hidden; // hide overflow part of quotation mark

    @media only screen and (max-width: $bp-medium) {
        // decrease padding
        padding: 2rem;
        // decrese bottom margin
        margin-bottom: 3rem;
    }

    &__text {
        margin-bottom: 2rem;
        z-index: 10; // to put text above of quotation mark
        position: relative;
    }

    // Flexbox container
    &__user {
        display: flex;
        align-items: center;
    }

    &__photo {
        height: 4.5rem;
        width: 4.5rem;
        border-radius: 50%;
        margin-right: 1.5rem;
    }

    &__user-box {
        margin-right: auto;
    }

    &__user-name {
        font-size: 1.1rem;
        font-weight: 600;
        text-transform: uppercase;
        margin-bottom: .4rem;
    }

    &__user-date {
        color: var(--color-grey-dark-3);
        font-size: 1rem;
    }

    &__rating {
        color: var(--color-primary);
        font-size: 2.2rem;
        font-weight: 300;
    }

    // to create the quotation mark on the background
    &::before {
        content: "\201C";
        position: absolute;
        top: -2.75rem;
        left: -1rem;
        line-height: 1;
        font-size: 20rem;
        color: var(--color-grey-light-2);
        font-family: sans-serif; // the style we want
        z-index: 1;
    }
}

////////////////////////////////////////////////
// CALL TO ACTION
.cta {
    padding: 3.5rem 0;
    text-align: center; // to center text and button

    @media only screen and (max-width: $bp-medium) {
        // decrease padding
        padding: 2.5rem 0;
    }

    &__book-now {
        font-size: 2rem;
        font-weight: 300;
        text-transform: uppercase;
        margin-bottom: 2.5rem;
    }
}

////////////////////////////////////////////////
// BUTTON
.btn {
    font-size: 1.5rem;
    font-weight: 300;
    text-transform: uppercase;
    border-radius: 100px;
    border: none;
    background-image: linear-gradient(to right, var(--color-primary-light), var(--color-primary-dark));
    color: #fff;
    position: relative;
    overflow: hidden; // make invisible button disappear since it's overflowing the btn
    cursor: pointer;

    // to not repeat code
    &>* {
        display: inline-block;
        height: 100%;
        width: 100%;
        transition: all .2s;
    }

    &__visible {
        padding: 2rem 7.5rem;
    }

    &__invisible {
        position: absolute;
        padding: 2rem 0;
        left: 0;
        top: -100%; // move up exactly the size of the element (if 50px height move up by that number)
    }

    &:hover {
        // transition doesn't work for background-image and gradients, so no animations here
        background-image: linear-gradient(to left, var(--color-primary-light), var(--color-primary-dark));
    }

    &:hover &__visible {
        transform: translateY(100%); // move down by 100% of its height
    }

    &:hover &__invisible {
        // move it back down
        top: 0;
    }

    &:focus {
        outline: none;
        animation: pulsate 1s infinite;
    }
}